// Code generated by protoc-gen-go.
// source: github.com/openconfig/reference/rpc/gnmi/gnmi.proto
// DO NOT EDIT!

/*
Package gnmi is a generated protocol buffer package.

Package gNMI defines a service specification for the gRPC Network Management
Interface. This interface is defined to be a standard interface via which
a network management system ("client") can subscribe to state values,
retrieve snapshots of state information, and manipulate the state of a data
tree supported by a device ("target").

This document references the gNMI Specification which can be found at
http://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi.md

It is generated from these files:
	github.com/openconfig/reference/rpc/gnmi/gnmi.proto

It has these top-level messages:
	Notification
	Update
	Path
	Value
	Error
	Decimal64
	ScalarArray
	ScalarArrayElement
	SubscribeRequest
	Poll
	SubscribeResponse
	SubscriptionList
	Subscription
	QOSMarking
	Alias
	AliasList
	SetRequest
	SetResponse
	UpdateResult
	GetRequest
	GetResponse
	CapabilityRequest
	CapabilityResponse
	ModelData
*/
package gnmi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Encoding defines the value encoding formats that are supported by the gNMI
// protocol. These encodings are used by both the client (when sending Set
// messages to modify the state of the target) and the target when serializing
// data to be returned to the client (in both Subscribe and Get RPCs).
// Reference: gNMI Specification Section 2.3
type Encoding int32

const (
	Encoding_JSON      Encoding = 0
	Encoding_BYTES     Encoding = 1
	Encoding_PROTO     Encoding = 2
	Encoding_ASCII     Encoding = 3
	Encoding_JSON_IETF Encoding = 4
)

var Encoding_name = map[int32]string{
	0: "JSON",
	1: "BYTES",
	2: "PROTO",
	3: "ASCII",
	4: "JSON_IETF",
}
var Encoding_value = map[string]int32{
	"JSON":      0,
	"BYTES":     1,
	"PROTO":     2,
	"ASCII":     3,
	"JSON_IETF": 4,
}

func (x Encoding) String() string {
	return proto.EnumName(Encoding_name, int32(x))
}
func (Encoding) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// SubscriptionMode is the mode of the subscription, specifying how the
// target must return values in a subscription.
// Reference: gNMI Specification Section 3.5.1.3
type SubscriptionMode int32

const (
	SubscriptionMode_TARGET_DEFINED SubscriptionMode = 0
	SubscriptionMode_ON_CHANGE      SubscriptionMode = 1
	SubscriptionMode_SAMPLE         SubscriptionMode = 2
)

var SubscriptionMode_name = map[int32]string{
	0: "TARGET_DEFINED",
	1: "ON_CHANGE",
	2: "SAMPLE",
}
var SubscriptionMode_value = map[string]int32{
	"TARGET_DEFINED": 0,
	"ON_CHANGE":      1,
	"SAMPLE":         2,
}

func (x SubscriptionMode) String() string {
	return proto.EnumName(SubscriptionMode_name, int32(x))
}
func (SubscriptionMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Mode of the subscription.
type SubscriptionList_Mode int32

const (
	SubscriptionList_STREAM SubscriptionList_Mode = 0
	SubscriptionList_ONCE   SubscriptionList_Mode = 1
	SubscriptionList_POLL   SubscriptionList_Mode = 2
)

var SubscriptionList_Mode_name = map[int32]string{
	0: "STREAM",
	1: "ONCE",
	2: "POLL",
}
var SubscriptionList_Mode_value = map[string]int32{
	"STREAM": 0,
	"ONCE":   1,
	"POLL":   2,
}

func (x SubscriptionList_Mode) String() string {
	return proto.EnumName(SubscriptionList_Mode_name, int32(x))
}
func (SubscriptionList_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

// The operation that was associated with the Path specified.
type UpdateResult_Operation int32

const (
	UpdateResult_INVALID UpdateResult_Operation = 0
	UpdateResult_DELETE  UpdateResult_Operation = 1
	UpdateResult_REPLACE UpdateResult_Operation = 2
	UpdateResult_UPDATE  UpdateResult_Operation = 3
)

var UpdateResult_Operation_name = map[int32]string{
	0: "INVALID",
	1: "DELETE",
	2: "REPLACE",
	3: "UPDATE",
}
var UpdateResult_Operation_value = map[string]int32{
	"INVALID": 0,
	"DELETE":  1,
	"REPLACE": 2,
	"UPDATE":  3,
}

func (x UpdateResult_Operation) String() string {
	return proto.EnumName(UpdateResult_Operation_name, int32(x))
}
func (UpdateResult_Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 0} }

// Type of elements within the data tree.
type GetRequest_DataType int32

const (
	GetRequest_ALL    GetRequest_DataType = 0
	GetRequest_CONFIG GetRequest_DataType = 1
	GetRequest_STATE  GetRequest_DataType = 2
	// Data elements marked in the schema as operational. This refers to data
	// elements whose value relates to the state of processes or interactions
	// running on the device.
	GetRequest_OPERATIONAL GetRequest_DataType = 3
)

var GetRequest_DataType_name = map[int32]string{
	0: "ALL",
	1: "CONFIG",
	2: "STATE",
	3: "OPERATIONAL",
}
var GetRequest_DataType_value = map[string]int32{
	"ALL":         0,
	"CONFIG":      1,
	"STATE":       2,
	"OPERATIONAL": 3,
}

func (x GetRequest_DataType) String() string {
	return proto.EnumName(GetRequest_DataType_name, int32(x))
}
func (GetRequest_DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

// Notification is a re-usable message that is used to encode data from the
// target to the client. A Notification carries two types of changes to the data
// tree:
//  - Deleted values (delete) - a set of paths that have been removed from the
//    data tree.
//  - Updated values (update) - a set of path-value pairs indicating the path
//    whose value has changed in the data tree.
// Reference: gNMI Specification Section 2.1
type Notification struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Prefix    *Path `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	// An alias for the path specified in the prefix field.
	// Reference: gNMI Specification Section 2.4.2
	Alias  string    `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	Update []*Update `protobuf:"bytes,4,rep,name=update" json:"update,omitempty"`
	Delete []*Path   `protobuf:"bytes,5,rep,name=delete" json:"delete,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Notification) GetPrefix() *Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *Notification) GetUpdate() []*Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *Notification) GetDelete() []*Path {
	if m != nil {
		return m.Delete
	}
	return nil
}

// Update is a re-usable message that is used to store a particular Path,
// Value pair.
// Reference: gNMI Specification Section 2.1
type Update struct {
	Path  *Path  `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// One of the fields within the val oneof is populated with the value
	// of the update. The type of the value being included in the Update
	// determines which field should be populated. In the case that the
	// encoding is a particular form of the base protobuf type, a specific
	// field is used to store the value (e.g., json_val).
	//
	// Types that are valid to be assigned to Val:
	//	*Update_StringVal
	//	*Update_IntVal
	//	*Update_UintVal
	//	*Update_BoolVal
	//	*Update_BytesVal
	//	*Update_FloatVal
	//	*Update_DecimalVal
	//	*Update_LeaflistVal
	//	*Update_AnyVal
	//	*Update_JsonVal
	//	*Update_JsonIetfVal
	//	*Update_AsciiVal
	Val isUpdate_Val `protobuf_oneof:"val"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isUpdate_Val interface {
	isUpdate_Val()
}

type Update_StringVal struct {
	StringVal string `protobuf:"bytes,10,opt,name=string_val,json=stringVal,oneof"`
}
type Update_IntVal struct {
	IntVal int64 `protobuf:"varint,11,opt,name=int_val,json=intVal,oneof"`
}
type Update_UintVal struct {
	UintVal uint64 `protobuf:"varint,12,opt,name=uint_val,json=uintVal,oneof"`
}
type Update_BoolVal struct {
	BoolVal bool `protobuf:"varint,13,opt,name=bool_val,json=boolVal,oneof"`
}
type Update_BytesVal struct {
	BytesVal []byte `protobuf:"bytes,14,opt,name=bytes_val,json=bytesVal,proto3,oneof"`
}
type Update_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,15,opt,name=float_val,json=floatVal,oneof"`
}
type Update_DecimalVal struct {
	DecimalVal *Decimal64 `protobuf:"bytes,16,opt,name=decimal_val,json=decimalVal,oneof"`
}
type Update_LeaflistVal struct {
	LeaflistVal *ScalarArray `protobuf:"bytes,17,opt,name=leaflist_val,json=leaflistVal,oneof"`
}
type Update_AnyVal struct {
	AnyVal *google_protobuf.Any `protobuf:"bytes,18,opt,name=any_val,json=anyVal,oneof"`
}
type Update_JsonVal struct {
	JsonVal []byte `protobuf:"bytes,19,opt,name=json_val,json=jsonVal,proto3,oneof"`
}
type Update_JsonIetfVal struct {
	JsonIetfVal []byte `protobuf:"bytes,20,opt,name=json_ietf_val,json=jsonIetfVal,proto3,oneof"`
}
type Update_AsciiVal struct {
	AsciiVal string `protobuf:"bytes,21,opt,name=ascii_val,json=asciiVal,oneof"`
}

func (*Update_StringVal) isUpdate_Val()   {}
func (*Update_IntVal) isUpdate_Val()      {}
func (*Update_UintVal) isUpdate_Val()     {}
func (*Update_BoolVal) isUpdate_Val()     {}
func (*Update_BytesVal) isUpdate_Val()    {}
func (*Update_FloatVal) isUpdate_Val()    {}
func (*Update_DecimalVal) isUpdate_Val()  {}
func (*Update_LeaflistVal) isUpdate_Val() {}
func (*Update_AnyVal) isUpdate_Val()      {}
func (*Update_JsonVal) isUpdate_Val()     {}
func (*Update_JsonIetfVal) isUpdate_Val() {}
func (*Update_AsciiVal) isUpdate_Val()    {}

func (m *Update) GetVal() isUpdate_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Update) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Update) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Update) GetStringVal() string {
	if x, ok := m.GetVal().(*Update_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (m *Update) GetIntVal() int64 {
	if x, ok := m.GetVal().(*Update_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (m *Update) GetUintVal() uint64 {
	if x, ok := m.GetVal().(*Update_UintVal); ok {
		return x.UintVal
	}
	return 0
}

func (m *Update) GetBoolVal() bool {
	if x, ok := m.GetVal().(*Update_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (m *Update) GetBytesVal() []byte {
	if x, ok := m.GetVal().(*Update_BytesVal); ok {
		return x.BytesVal
	}
	return nil
}

func (m *Update) GetFloatVal() float32 {
	if x, ok := m.GetVal().(*Update_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (m *Update) GetDecimalVal() *Decimal64 {
	if x, ok := m.GetVal().(*Update_DecimalVal); ok {
		return x.DecimalVal
	}
	return nil
}

func (m *Update) GetLeaflistVal() *ScalarArray {
	if x, ok := m.GetVal().(*Update_LeaflistVal); ok {
		return x.LeaflistVal
	}
	return nil
}

func (m *Update) GetAnyVal() *google_protobuf.Any {
	if x, ok := m.GetVal().(*Update_AnyVal); ok {
		return x.AnyVal
	}
	return nil
}

func (m *Update) GetJsonVal() []byte {
	if x, ok := m.GetVal().(*Update_JsonVal); ok {
		return x.JsonVal
	}
	return nil
}

func (m *Update) GetJsonIetfVal() []byte {
	if x, ok := m.GetVal().(*Update_JsonIetfVal); ok {
		return x.JsonIetfVal
	}
	return nil
}

func (m *Update) GetAsciiVal() string {
	if x, ok := m.GetVal().(*Update_AsciiVal); ok {
		return x.AsciiVal
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_OneofMarshaler, _Update_OneofUnmarshaler, _Update_OneofSizer, []interface{}{
		(*Update_StringVal)(nil),
		(*Update_IntVal)(nil),
		(*Update_UintVal)(nil),
		(*Update_BoolVal)(nil),
		(*Update_BytesVal)(nil),
		(*Update_FloatVal)(nil),
		(*Update_DecimalVal)(nil),
		(*Update_LeaflistVal)(nil),
		(*Update_AnyVal)(nil),
		(*Update_JsonVal)(nil),
		(*Update_JsonIetfVal)(nil),
		(*Update_AsciiVal)(nil),
	}
}

func _Update_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update)
	// val
	switch x := m.Val.(type) {
	case *Update_StringVal:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringVal)
	case *Update_IntVal:
		b.EncodeVarint(11<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntVal))
	case *Update_UintVal:
		b.EncodeVarint(12<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.UintVal))
	case *Update_BoolVal:
		t := uint64(0)
		if x.BoolVal {
			t = 1
		}
		b.EncodeVarint(13<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Update_BytesVal:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesVal)
	case *Update_FloatVal:
		b.EncodeVarint(15<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.FloatVal)))
	case *Update_DecimalVal:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DecimalVal); err != nil {
			return err
		}
	case *Update_LeaflistVal:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeaflistVal); err != nil {
			return err
		}
	case *Update_AnyVal:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnyVal); err != nil {
			return err
		}
	case *Update_JsonVal:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.JsonVal)
	case *Update_JsonIetfVal:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.JsonIetfVal)
	case *Update_AsciiVal:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.AsciiVal)
	case nil:
	default:
		return fmt.Errorf("Update.Val has unexpected type %T", x)
	}
	return nil
}

func _Update_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update)
	switch tag {
	case 10: // val.string_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Val = &Update_StringVal{x}
		return true, err
	case 11: // val.int_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Update_IntVal{int64(x)}
		return true, err
	case 12: // val.uint_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Update_UintVal{x}
		return true, err
	case 13: // val.bool_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Update_BoolVal{x != 0}
		return true, err
	case 14: // val.bytes_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Val = &Update_BytesVal{x}
		return true, err
	case 15: // val.float_val
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Val = &Update_FloatVal{math.Float32frombits(uint32(x))}
		return true, err
	case 16: // val.decimal_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal64)
		err := b.DecodeMessage(msg)
		m.Val = &Update_DecimalVal{msg}
		return true, err
	case 17: // val.leaflist_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScalarArray)
		err := b.DecodeMessage(msg)
		m.Val = &Update_LeaflistVal{msg}
		return true, err
	case 18: // val.any_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Val = &Update_AnyVal{msg}
		return true, err
	case 19: // val.json_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Val = &Update_JsonVal{x}
		return true, err
	case 20: // val.json_ietf_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Val = &Update_JsonIetfVal{x}
		return true, err
	case 21: // val.ascii_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Val = &Update_AsciiVal{x}
		return true, err
	default:
		return false, nil
	}
}

func _Update_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update)
	// val
	switch x := m.Val.(type) {
	case *Update_StringVal:
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringVal)))
		n += len(x.StringVal)
	case *Update_IntVal:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntVal))
	case *Update_UintVal:
		n += proto.SizeVarint(12<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.UintVal))
	case *Update_BoolVal:
		n += proto.SizeVarint(13<<3 | proto.WireVarint)
		n += 1
	case *Update_BytesVal:
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesVal)))
		n += len(x.BytesVal)
	case *Update_FloatVal:
		n += proto.SizeVarint(15<<3 | proto.WireFixed32)
		n += 4
	case *Update_DecimalVal:
		s := proto.Size(x.DecimalVal)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_LeaflistVal:
		s := proto.Size(x.LeaflistVal)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_AnyVal:
		s := proto.Size(x.AnyVal)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_JsonVal:
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.JsonVal)))
		n += len(x.JsonVal)
	case *Update_JsonIetfVal:
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.JsonIetfVal)))
		n += len(x.JsonIetfVal)
	case *Update_AsciiVal:
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AsciiVal)))
		n += len(x.AsciiVal)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Path encodes a data tree path as a series of repeated strings, with
// each element of the path representing a data tree node name and the
// associated attributes.
// Reference: gNMI Specification Section 2.2.2.
type Path struct {
	Element []string `protobuf:"bytes,1,rep,name=element" json:"element,omitempty"`
	Origin  string   `protobuf:"bytes,2,opt,name=origin" json:"origin,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Value encodes a data tree node's value - along with the way in which
// the value is encoded. This field is deprecated by gNMI 0.3.0.
// Reference: gNMI Specification Section 2.2.3.
type Value struct {
	Value []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  Encoding `protobuf:"varint,2,opt,name=type,enum=gnmi.Encoding" json:"type,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Error message used by the target to return errors to the client.
// Reference: gNMI Specification Section 2.5
type Error struct {
	Code    uint32               `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    *google_protobuf.Any `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetData() *google_protobuf.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

// Decimal64 is used to encode floating-point decimal number. The value
// expressed as a set of digits with the precision specifying the number
// of digits following the decimal point in the digit set.
type Decimal64 struct {
	Digits    uint64 `protobuf:"varint,1,opt,name=digits" json:"digits,omitempty"`
	Precision uint32 `protobuf:"varint,2,opt,name=precision" json:"precision,omitempty"`
}

func (m *Decimal64) Reset()                    { *m = Decimal64{} }
func (m *Decimal64) String() string            { return proto.CompactTextString(m) }
func (*Decimal64) ProtoMessage()               {}
func (*Decimal64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// ScalarArray is used to encode a mixed-type array of values.
type ScalarArray struct {
	// The set of elements contained within the array.
	Element []*ScalarArrayElement `protobuf:"bytes,1,rep,name=element" json:"element,omitempty"`
}

func (m *ScalarArray) Reset()                    { *m = ScalarArray{} }
func (m *ScalarArray) String() string            { return proto.CompactTextString(m) }
func (*ScalarArray) ProtoMessage()               {}
func (*ScalarArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ScalarArray) GetElement() []*ScalarArrayElement {
	if m != nil {
		return m.Element
	}
	return nil
}

// ScalarArrayElement specifies an individual element of a scalar array.
type ScalarArrayElement struct {
	// One of the fields within the value oneof may be specified
	// indicating an element included within the ScalarArray.
	//
	// Types that are valid to be assigned to Value:
	//	*ScalarArrayElement_StringVal
	//	*ScalarArrayElement_IntVal
	//	*ScalarArrayElement_UintVal
	//	*ScalarArrayElement_BoolVal
	//	*ScalarArrayElement_BytesVal
	//	*ScalarArrayElement_FloatVal
	//	*ScalarArrayElement_DecimalVal
	Value isScalarArrayElement_Value `protobuf_oneof:"value"`
}

func (m *ScalarArrayElement) Reset()                    { *m = ScalarArrayElement{} }
func (m *ScalarArrayElement) String() string            { return proto.CompactTextString(m) }
func (*ScalarArrayElement) ProtoMessage()               {}
func (*ScalarArrayElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isScalarArrayElement_Value interface {
	isScalarArrayElement_Value()
}

type ScalarArrayElement_StringVal struct {
	StringVal string `protobuf:"bytes,1,opt,name=string_val,json=stringVal,oneof"`
}
type ScalarArrayElement_IntVal struct {
	IntVal int64 `protobuf:"varint,2,opt,name=int_val,json=intVal,oneof"`
}
type ScalarArrayElement_UintVal struct {
	UintVal uint64 `protobuf:"varint,3,opt,name=uint_val,json=uintVal,oneof"`
}
type ScalarArrayElement_BoolVal struct {
	BoolVal bool `protobuf:"varint,4,opt,name=bool_val,json=boolVal,oneof"`
}
type ScalarArrayElement_BytesVal struct {
	BytesVal []byte `protobuf:"bytes,5,opt,name=bytes_val,json=bytesVal,proto3,oneof"`
}
type ScalarArrayElement_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,6,opt,name=float_val,json=floatVal,oneof"`
}
type ScalarArrayElement_DecimalVal struct {
	DecimalVal *Decimal64 `protobuf:"bytes,7,opt,name=decimal_val,json=decimalVal,oneof"`
}

func (*ScalarArrayElement_StringVal) isScalarArrayElement_Value()  {}
func (*ScalarArrayElement_IntVal) isScalarArrayElement_Value()     {}
func (*ScalarArrayElement_UintVal) isScalarArrayElement_Value()    {}
func (*ScalarArrayElement_BoolVal) isScalarArrayElement_Value()    {}
func (*ScalarArrayElement_BytesVal) isScalarArrayElement_Value()   {}
func (*ScalarArrayElement_FloatVal) isScalarArrayElement_Value()   {}
func (*ScalarArrayElement_DecimalVal) isScalarArrayElement_Value() {}

func (m *ScalarArrayElement) GetValue() isScalarArrayElement_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ScalarArrayElement) GetStringVal() string {
	if x, ok := m.GetValue().(*ScalarArrayElement_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (m *ScalarArrayElement) GetIntVal() int64 {
	if x, ok := m.GetValue().(*ScalarArrayElement_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (m *ScalarArrayElement) GetUintVal() uint64 {
	if x, ok := m.GetValue().(*ScalarArrayElement_UintVal); ok {
		return x.UintVal
	}
	return 0
}

func (m *ScalarArrayElement) GetBoolVal() bool {
	if x, ok := m.GetValue().(*ScalarArrayElement_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (m *ScalarArrayElement) GetBytesVal() []byte {
	if x, ok := m.GetValue().(*ScalarArrayElement_BytesVal); ok {
		return x.BytesVal
	}
	return nil
}

func (m *ScalarArrayElement) GetFloatVal() float32 {
	if x, ok := m.GetValue().(*ScalarArrayElement_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (m *ScalarArrayElement) GetDecimalVal() *Decimal64 {
	if x, ok := m.GetValue().(*ScalarArrayElement_DecimalVal); ok {
		return x.DecimalVal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ScalarArrayElement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ScalarArrayElement_OneofMarshaler, _ScalarArrayElement_OneofUnmarshaler, _ScalarArrayElement_OneofSizer, []interface{}{
		(*ScalarArrayElement_StringVal)(nil),
		(*ScalarArrayElement_IntVal)(nil),
		(*ScalarArrayElement_UintVal)(nil),
		(*ScalarArrayElement_BoolVal)(nil),
		(*ScalarArrayElement_BytesVal)(nil),
		(*ScalarArrayElement_FloatVal)(nil),
		(*ScalarArrayElement_DecimalVal)(nil),
	}
}

func _ScalarArrayElement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ScalarArrayElement)
	// value
	switch x := m.Value.(type) {
	case *ScalarArrayElement_StringVal:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringVal)
	case *ScalarArrayElement_IntVal:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntVal))
	case *ScalarArrayElement_UintVal:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.UintVal))
	case *ScalarArrayElement_BoolVal:
		t := uint64(0)
		if x.BoolVal {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ScalarArrayElement_BytesVal:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesVal)
	case *ScalarArrayElement_FloatVal:
		b.EncodeVarint(6<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.FloatVal)))
	case *ScalarArrayElement_DecimalVal:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DecimalVal); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ScalarArrayElement.Value has unexpected type %T", x)
	}
	return nil
}

func _ScalarArrayElement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ScalarArrayElement)
	switch tag {
	case 1: // value.string_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ScalarArrayElement_StringVal{x}
		return true, err
	case 2: // value.int_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ScalarArrayElement_IntVal{int64(x)}
		return true, err
	case 3: // value.uint_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ScalarArrayElement_UintVal{x}
		return true, err
	case 4: // value.bool_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ScalarArrayElement_BoolVal{x != 0}
		return true, err
	case 5: // value.bytes_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &ScalarArrayElement_BytesVal{x}
		return true, err
	case 6: // value.float_val
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &ScalarArrayElement_FloatVal{math.Float32frombits(uint32(x))}
		return true, err
	case 7: // value.decimal_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal64)
		err := b.DecodeMessage(msg)
		m.Value = &ScalarArrayElement_DecimalVal{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ScalarArrayElement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ScalarArrayElement)
	// value
	switch x := m.Value.(type) {
	case *ScalarArrayElement_StringVal:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringVal)))
		n += len(x.StringVal)
	case *ScalarArrayElement_IntVal:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntVal))
	case *ScalarArrayElement_UintVal:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.UintVal))
	case *ScalarArrayElement_BoolVal:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *ScalarArrayElement_BytesVal:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesVal)))
		n += len(x.BytesVal)
	case *ScalarArrayElement_FloatVal:
		n += proto.SizeVarint(6<<3 | proto.WireFixed32)
		n += 4
	case *ScalarArrayElement_DecimalVal:
		s := proto.Size(x.DecimalVal)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SubscribeRequest is the message sent by the client to the target when
// initiating a subscription to a set of paths within the data tree. The
// request field must be populated and the initial message must specify a
// SubscriptionList to initiate a subscription. The message is subsequently
// used to define aliases or trigger polled data to be sent by the target.
// Reference: gNMI Specification Section 3.5.1.1
type SubscribeRequest struct {
	// Types that are valid to be assigned to Request:
	//	*SubscribeRequest_Subscribe
	//	*SubscribeRequest_Poll
	//	*SubscribeRequest_Aliases
	Request isSubscribeRequest_Request `protobuf_oneof:"request"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isSubscribeRequest_Request interface {
	isSubscribeRequest_Request()
}

type SubscribeRequest_Subscribe struct {
	Subscribe *SubscriptionList `protobuf:"bytes,1,opt,name=subscribe,oneof"`
}
type SubscribeRequest_Poll struct {
	Poll *Poll `protobuf:"bytes,3,opt,name=poll,oneof"`
}
type SubscribeRequest_Aliases struct {
	Aliases *AliasList `protobuf:"bytes,4,opt,name=aliases,oneof"`
}

func (*SubscribeRequest_Subscribe) isSubscribeRequest_Request() {}
func (*SubscribeRequest_Poll) isSubscribeRequest_Request()      {}
func (*SubscribeRequest_Aliases) isSubscribeRequest_Request()   {}

func (m *SubscribeRequest) GetRequest() isSubscribeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SubscribeRequest) GetSubscribe() *SubscriptionList {
	if x, ok := m.GetRequest().(*SubscribeRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (m *SubscribeRequest) GetPoll() *Poll {
	if x, ok := m.GetRequest().(*SubscribeRequest_Poll); ok {
		return x.Poll
	}
	return nil
}

func (m *SubscribeRequest) GetAliases() *AliasList {
	if x, ok := m.GetRequest().(*SubscribeRequest_Aliases); ok {
		return x.Aliases
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubscribeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubscribeRequest_OneofMarshaler, _SubscribeRequest_OneofUnmarshaler, _SubscribeRequest_OneofSizer, []interface{}{
		(*SubscribeRequest_Subscribe)(nil),
		(*SubscribeRequest_Poll)(nil),
		(*SubscribeRequest_Aliases)(nil),
	}
}

func _SubscribeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubscribeRequest)
	// request
	switch x := m.Request.(type) {
	case *SubscribeRequest_Subscribe:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Subscribe); err != nil {
			return err
		}
	case *SubscribeRequest_Poll:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Poll); err != nil {
			return err
		}
	case *SubscribeRequest_Aliases:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aliases); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubscribeRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SubscribeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubscribeRequest)
	switch tag {
	case 1: // request.subscribe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscriptionList)
		err := b.DecodeMessage(msg)
		m.Request = &SubscribeRequest_Subscribe{msg}
		return true, err
	case 3: // request.poll
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Poll)
		err := b.DecodeMessage(msg)
		m.Request = &SubscribeRequest_Poll{msg}
		return true, err
	case 4: // request.aliases
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AliasList)
		err := b.DecodeMessage(msg)
		m.Request = &SubscribeRequest_Aliases{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubscribeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubscribeRequest)
	// request
	switch x := m.Request.(type) {
	case *SubscribeRequest_Subscribe:
		s := proto.Size(x.Subscribe)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeRequest_Poll:
		s := proto.Size(x.Poll)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeRequest_Aliases:
		s := proto.Size(x.Aliases)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Poll is sent within a SubscribeRequest to trigger the device to
// send telemetry updates for the paths that are associated with the
// subscription.
// Reference: gNMI Specification Section Section 3.5.1.4
type Poll struct {
}

func (m *Poll) Reset()                    { *m = Poll{} }
func (m *Poll) String() string            { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()               {}
func (*Poll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// SubscribeResponse is the message used by the target within a Subscribe RPC.
// The target includes a Notification message which is used to transmit values
// of the path(s) that are associated with the subscription. The same message
// is to indicate that the target has sent all data values once (is
// synchronized). The error field is used to report errors that occur during
// creation of a subscription.
// Reference: gNMI Specification Section 3.5.1.4
type SubscribeResponse struct {
	// Types that are valid to be assigned to Response:
	//	*SubscribeResponse_Update
	//	*SubscribeResponse_SyncResponse
	//	*SubscribeResponse_Error
	Response isSubscribeResponse_Response `protobuf_oneof:"response"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isSubscribeResponse_Response interface {
	isSubscribeResponse_Response()
}

type SubscribeResponse_Update struct {
	Update *Notification `protobuf:"bytes,1,opt,name=update,oneof"`
}
type SubscribeResponse_SyncResponse struct {
	SyncResponse bool `protobuf:"varint,3,opt,name=sync_response,json=syncResponse,oneof"`
}
type SubscribeResponse_Error struct {
	Error *Error `protobuf:"bytes,4,opt,name=error,oneof"`
}

func (*SubscribeResponse_Update) isSubscribeResponse_Response()       {}
func (*SubscribeResponse_SyncResponse) isSubscribeResponse_Response() {}
func (*SubscribeResponse_Error) isSubscribeResponse_Response()        {}

func (m *SubscribeResponse) GetResponse() isSubscribeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SubscribeResponse) GetUpdate() *Notification {
	if x, ok := m.GetResponse().(*SubscribeResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (m *SubscribeResponse) GetSyncResponse() bool {
	if x, ok := m.GetResponse().(*SubscribeResponse_SyncResponse); ok {
		return x.SyncResponse
	}
	return false
}

func (m *SubscribeResponse) GetError() *Error {
	if x, ok := m.GetResponse().(*SubscribeResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubscribeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubscribeResponse_OneofMarshaler, _SubscribeResponse_OneofUnmarshaler, _SubscribeResponse_OneofSizer, []interface{}{
		(*SubscribeResponse_Update)(nil),
		(*SubscribeResponse_SyncResponse)(nil),
		(*SubscribeResponse_Error)(nil),
	}
}

func _SubscribeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubscribeResponse)
	// response
	switch x := m.Response.(type) {
	case *SubscribeResponse_Update:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Update); err != nil {
			return err
		}
	case *SubscribeResponse_SyncResponse:
		t := uint64(0)
		if x.SyncResponse {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *SubscribeResponse_Error:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubscribeResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _SubscribeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubscribeResponse)
	switch tag {
	case 1: // response.update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Notification)
		err := b.DecodeMessage(msg)
		m.Response = &SubscribeResponse_Update{msg}
		return true, err
	case 3: // response.sync_response
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &SubscribeResponse_SyncResponse{x != 0}
		return true, err
	case 4: // response.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Response = &SubscribeResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubscribeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubscribeResponse)
	// response
	switch x := m.Response.(type) {
	case *SubscribeResponse_Update:
		s := proto.Size(x.Update)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeResponse_SyncResponse:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case *SubscribeResponse_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SubscriptionList is used within a Subscribe message to specify the list of
// paths that the client wishes to subscribe to. The message consists of a
// list of (possibly prefixed) paths, and options that relate to the
// subscription.
// Reference: gNMI Specification Section 3.5.1.2
type SubscriptionList struct {
	Prefix       *Path           `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	Subscription []*Subscription `protobuf:"bytes,2,rep,name=subscription" json:"subscription,omitempty"`
	// Whether target defined aliases are allowed within the subscription.
	UseAliases bool                  `protobuf:"varint,3,opt,name=use_aliases,json=useAliases" json:"use_aliases,omitempty"`
	Qos        *QOSMarking           `protobuf:"bytes,4,opt,name=qos" json:"qos,omitempty"`
	Mode       SubscriptionList_Mode `protobuf:"varint,5,opt,name=mode,enum=gnmi.SubscriptionList_Mode" json:"mode,omitempty"`
	// Whether elements of the schema that are marked as eligible for aggregation
	// should be aggregated or not.
	AllowAggregation bool `protobuf:"varint,6,opt,name=allow_aggregation,json=allowAggregation" json:"allow_aggregation,omitempty"`
	// The set of schemas that define the elements of the data tree that should
	// be sent by the target.
	UseModels []*ModelData `protobuf:"bytes,7,rep,name=use_models,json=useModels" json:"use_models,omitempty"`
	// The encoding that the target should use within the Notifications generated
	// corresponding to the SubscriptionList.
	Encoding Encoding `protobuf:"varint,8,opt,name=encoding,enum=gnmi.Encoding" json:"encoding,omitempty"`
}

func (m *SubscriptionList) Reset()                    { *m = SubscriptionList{} }
func (m *SubscriptionList) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionList) ProtoMessage()               {}
func (*SubscriptionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SubscriptionList) GetPrefix() *Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SubscriptionList) GetSubscription() []*Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *SubscriptionList) GetQos() *QOSMarking {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *SubscriptionList) GetUseModels() []*ModelData {
	if m != nil {
		return m.UseModels
	}
	return nil
}

// Subscription is a single request within a SubscriptionList. The path
// specified is interpreted (along with the prefix) as the elements of the data
// tree that the client is subscribing to. The mode determines how the target
// should trigger updates to be sent.
// Reference: gNMI Specification Section 3.5.1.3
type Subscription struct {
	Path           *Path            `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode           SubscriptionMode `protobuf:"varint,2,opt,name=mode,enum=gnmi.SubscriptionMode" json:"mode,omitempty"`
	SampleInterval uint64           `protobuf:"varint,3,opt,name=sample_interval,json=sampleInterval" json:"sample_interval,omitempty"`
	// Indicates whether values that not changed should be sent in a SAMPLE
	// subscription.
	SuppressRedundant bool `protobuf:"varint,4,opt,name=suppress_redundant,json=suppressRedundant" json:"suppress_redundant,omitempty"`
	// Specifies the maximum allowable silent period in nanoseconds when
	// suppress_redundant is in use. The target should send a value at least once
	// in the period specified.
	HeartbeatInterval uint64 `protobuf:"varint,5,opt,name=heartbeat_interval,json=heartbeatInterval" json:"heartbeat_interval,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Subscription) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

// QOSMarking specifies the DSCP value to be set on transmitted telemetry
// updates from the target.
// Reference: gNMI Specification Section 3.5.1.2
type QOSMarking struct {
	Marking uint32 `protobuf:"varint,1,opt,name=marking" json:"marking,omitempty"`
}

func (m *QOSMarking) Reset()                    { *m = QOSMarking{} }
func (m *QOSMarking) String() string            { return proto.CompactTextString(m) }
func (*QOSMarking) ProtoMessage()               {}
func (*QOSMarking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Alias specifies a data tree path, and an associated string which defines an
// alias which is to be used for this path in the context of the RPC. The alias
// is specified as a string which is prefixed with "#" to disambiguate it from
// data tree element paths.
// Reference: gNMI Specification Section 2.4.2
type Alias struct {
	Path  *Path  `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Alias string `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
}

func (m *Alias) Reset()                    { *m = Alias{} }
func (m *Alias) String() string            { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()               {}
func (*Alias) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Alias) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

// AliasList specifies a list of aliases. It is used in a SubscribeRequest for
// a client to create a set of aliases that the target is to utilize.
// Reference: gNMI Specification Section 3.5.1.6
type AliasList struct {
	Alias []*Alias `protobuf:"bytes,1,rep,name=alias" json:"alias,omitempty"`
}

func (m *AliasList) Reset()                    { *m = AliasList{} }
func (m *AliasList) String() string            { return proto.CompactTextString(m) }
func (*AliasList) ProtoMessage()               {}
func (*AliasList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AliasList) GetAlias() []*Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

// SetRequest is sent from a client to the target to update values in the data
// tree. Paths are either deleted by the client, or modified by means of being
// updated, or replaced. Where a replace is used, unspecified values are
// considered to be replaced, whereas when update is used the changes are
// considered to be incremental. The set of changes that are specified within
// a single SetRequest are considered to be a transaction.
// Reference: gNMI Specification Section 3.4.1
type SetRequest struct {
	Prefix  *Path     `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	Delete  []*Path   `protobuf:"bytes,2,rep,name=delete" json:"delete,omitempty"`
	Replace []*Update `protobuf:"bytes,3,rep,name=replace" json:"replace,omitempty"`
	Update  []*Update `protobuf:"bytes,4,rep,name=update" json:"update,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SetRequest) GetPrefix() *Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SetRequest) GetDelete() []*Path {
	if m != nil {
		return m.Delete
	}
	return nil
}

func (m *SetRequest) GetReplace() []*Update {
	if m != nil {
		return m.Replace
	}
	return nil
}

func (m *SetRequest) GetUpdate() []*Update {
	if m != nil {
		return m.Update
	}
	return nil
}

// SetResponse is the response to a SetRequest, sent from the target to the
// client. It reports the result of the modifications to the data tree that were
// specified by the client.
// Reference: gNMI Specification Section 3.4.2
type SetResponse struct {
	Prefix *Path `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// A set of responses specifying the result of the operations specified in
	// the SetRequest.
	Response []*UpdateResult `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
	Message  *Error          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SetResponse) GetPrefix() *Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SetResponse) GetResponse() []*UpdateResult {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SetResponse) GetMessage() *Error {
	if m != nil {
		return m.Message
	}
	return nil
}

// UpdateResult is used within the SetResponse message to communicate the
// result of an operation specified within a SetRequest message.
// Reference: gNMI Specification Section 3.4.2
type UpdateResult struct {
	Timestamp int64                  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Path      *Path                  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Message   *Error                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Op        UpdateResult_Operation `protobuf:"varint,4,opt,name=op,enum=gnmi.UpdateResult_Operation" json:"op,omitempty"`
}

func (m *UpdateResult) Reset()                    { *m = UpdateResult{} }
func (m *UpdateResult) String() string            { return proto.CompactTextString(m) }
func (*UpdateResult) ProtoMessage()               {}
func (*UpdateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateResult) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *UpdateResult) GetMessage() *Error {
	if m != nil {
		return m.Message
	}
	return nil
}

// GetRequest is sent when a client initiates a Get RPC. It is used to specify
// the set of data elements for which the target should return a snapshot of
// data. The use_models field specifies the set of schema modules that are to
// be used by the target - where use_models is not specified then the target
// must use all schema models that it has.
// Reference: gNMI Specification Section 3.3.1
type GetRequest struct {
	Prefix    *Path               `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	Path      []*Path             `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
	Type      GetRequest_DataType `protobuf:"varint,3,opt,name=type,enum=gnmi.GetRequest_DataType" json:"type,omitempty"`
	Encoding  Encoding            `protobuf:"varint,5,opt,name=encoding,enum=gnmi.Encoding" json:"encoding,omitempty"`
	UseModels []*ModelData        `protobuf:"bytes,6,rep,name=use_models,json=useModels" json:"use_models,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetRequest) GetPrefix() *Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *GetRequest) GetPath() []*Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *GetRequest) GetUseModels() []*ModelData {
	if m != nil {
		return m.UseModels
	}
	return nil
}

// GetResponse is used by the target to respond to a GetRequest from a client.
// The set of Notifications corresponds to the data values that are requested
// by the client in the GetRequest.
// Reference: gNMI Specification Section 3.3.2
type GetResponse struct {
	Notification []*Notification `protobuf:"bytes,1,rep,name=notification" json:"notification,omitempty"`
	Error        *Error          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetResponse) GetNotification() []*Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *GetResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// CapabilityRequest is sent by the client in the Capabilities RPC to request
// that the target reports its capabilities.
// Reference: gNMI Specification Section 3.2.1
type CapabilityRequest struct {
}

func (m *CapabilityRequest) Reset()                    { *m = CapabilityRequest{} }
func (m *CapabilityRequest) String() string            { return proto.CompactTextString(m) }
func (*CapabilityRequest) ProtoMessage()               {}
func (*CapabilityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// CapabilityResponse is used by the target to report its capabilities to the
// client within the Capabilities RPC.
// Reference: gNMI Specification Section 3.2.2
type CapabilityResponse struct {
	SupportedModels    []*ModelData `protobuf:"bytes,1,rep,name=supported_models,json=supportedModels" json:"supported_models,omitempty"`
	SupportedEncodings []Encoding   `protobuf:"varint,2,rep,packed,name=supported_encodings,json=supportedEncodings,enum=gnmi.Encoding" json:"supported_encodings,omitempty"`
	GNMIVersion        string       `protobuf:"bytes,3,opt,name=gNMI_version,json=gNMIVersion" json:"gNMI_version,omitempty"`
}

func (m *CapabilityResponse) Reset()                    { *m = CapabilityResponse{} }
func (m *CapabilityResponse) String() string            { return proto.CompactTextString(m) }
func (*CapabilityResponse) ProtoMessage()               {}
func (*CapabilityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CapabilityResponse) GetSupportedModels() []*ModelData {
	if m != nil {
		return m.SupportedModels
	}
	return nil
}

// ModelData is used to describe a set of schema modules. It can be used in a
// CapabilityResponse where a target reports the set of modules that it
// supports, and within the SubscribeRequest and GetRequest messages to specify
// the set of models from which data tree elements should be reported.
// Reference: gNMI Specification Section 3.2.3
type ModelData struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
	Version      string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *ModelData) Reset()                    { *m = ModelData{} }
func (m *ModelData) String() string            { return proto.CompactTextString(m) }
func (*ModelData) ProtoMessage()               {}
func (*ModelData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

var E_GnmiService = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1001,
	Name:          "gnmi.gnmi_service",
	Tag:           "bytes,1001,opt,name=gnmi_service,json=gnmiService",
}

func init() {
	proto.RegisterType((*Notification)(nil), "gnmi.Notification")
	proto.RegisterType((*Update)(nil), "gnmi.Update")
	proto.RegisterType((*Path)(nil), "gnmi.Path")
	proto.RegisterType((*Value)(nil), "gnmi.Value")
	proto.RegisterType((*Error)(nil), "gnmi.Error")
	proto.RegisterType((*Decimal64)(nil), "gnmi.Decimal64")
	proto.RegisterType((*ScalarArray)(nil), "gnmi.ScalarArray")
	proto.RegisterType((*ScalarArrayElement)(nil), "gnmi.ScalarArrayElement")
	proto.RegisterType((*SubscribeRequest)(nil), "gnmi.SubscribeRequest")
	proto.RegisterType((*Poll)(nil), "gnmi.Poll")
	proto.RegisterType((*SubscribeResponse)(nil), "gnmi.SubscribeResponse")
	proto.RegisterType((*SubscriptionList)(nil), "gnmi.SubscriptionList")
	proto.RegisterType((*Subscription)(nil), "gnmi.Subscription")
	proto.RegisterType((*QOSMarking)(nil), "gnmi.QOSMarking")
	proto.RegisterType((*Alias)(nil), "gnmi.Alias")
	proto.RegisterType((*AliasList)(nil), "gnmi.AliasList")
	proto.RegisterType((*SetRequest)(nil), "gnmi.SetRequest")
	proto.RegisterType((*SetResponse)(nil), "gnmi.SetResponse")
	proto.RegisterType((*UpdateResult)(nil), "gnmi.UpdateResult")
	proto.RegisterType((*GetRequest)(nil), "gnmi.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "gnmi.GetResponse")
	proto.RegisterType((*CapabilityRequest)(nil), "gnmi.CapabilityRequest")
	proto.RegisterType((*CapabilityResponse)(nil), "gnmi.CapabilityResponse")
	proto.RegisterType((*ModelData)(nil), "gnmi.ModelData")
	proto.RegisterEnum("gnmi.Encoding", Encoding_name, Encoding_value)
	proto.RegisterEnum("gnmi.SubscriptionMode", SubscriptionMode_name, SubscriptionMode_value)
	proto.RegisterEnum("gnmi.SubscriptionList_Mode", SubscriptionList_Mode_name, SubscriptionList_Mode_value)
	proto.RegisterEnum("gnmi.UpdateResult_Operation", UpdateResult_Operation_name, UpdateResult_Operation_value)
	proto.RegisterEnum("gnmi.GetRequest_DataType", GetRequest_DataType_name, GetRequest_DataType_value)
	proto.RegisterExtension(E_GnmiService)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GNMI service

type GNMIClient interface {
	// Capabilities allows the client to retrieve the set of capabilities that
	// is supported by the target. This allows the target to validate the
	// service version that is implemented and retrieve the set of models that
	// the target supports. The models can then be specified in subsequent RPCs
	// to restrict the set of data that is utilized.
	// Reference: gNMI Specification Section 3.2
	Capabilities(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*CapabilityResponse, error)
	// Retrieve a snapshot of data from the target. A Get RPC requests that the
	// target snapshots a subset of the data tree as specified by the paths
	// included in the message and serializes this to be returned to the
	// client using the specified encoding.
	// Reference: gNMI Specification Section 3.3
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Set allows the client to modify the state of data on the target. The
	// paths to modified along with the new values that the client wishes
	// to set the value to.
	// Reference: gNMI Specification Section 3.4
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	// Subscribe allows a client to request the target to send it values
	// of particular paths within the data tree. These values may be streamed
	// at a particular cadence (STREAM), sent one off on a long-lived channel
	// (POLL), or sent as a one-off retrieval (ONCE).
	// Reference: gNMI Specification Section 3.5
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (GNMI_SubscribeClient, error)
}

type gNMIClient struct {
	cc *grpc.ClientConn
}

func NewGNMIClient(cc *grpc.ClientConn) GNMIClient {
	return &gNMIClient{cc}
}

func (c *gNMIClient) Capabilities(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (*CapabilityResponse, error) {
	out := new(CapabilityResponse)
	err := grpc.Invoke(ctx, "/gnmi.gNMI/Capabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNMIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/gnmi.gNMI/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNMIClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/gnmi.gNMI/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNMIClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (GNMI_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GNMI_serviceDesc.Streams[0], c.cc, "/gnmi.gNMI/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &gNMISubscribeClient{stream}
	return x, nil
}

type GNMI_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type gNMISubscribeClient struct {
	grpc.ClientStream
}

func (x *gNMISubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gNMISubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GNMI service

type GNMIServer interface {
	// Capabilities allows the client to retrieve the set of capabilities that
	// is supported by the target. This allows the target to validate the
	// service version that is implemented and retrieve the set of models that
	// the target supports. The models can then be specified in subsequent RPCs
	// to restrict the set of data that is utilized.
	// Reference: gNMI Specification Section 3.2
	Capabilities(context.Context, *CapabilityRequest) (*CapabilityResponse, error)
	// Retrieve a snapshot of data from the target. A Get RPC requests that the
	// target snapshots a subset of the data tree as specified by the paths
	// included in the message and serializes this to be returned to the
	// client using the specified encoding.
	// Reference: gNMI Specification Section 3.3
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Set allows the client to modify the state of data on the target. The
	// paths to modified along with the new values that the client wishes
	// to set the value to.
	// Reference: gNMI Specification Section 3.4
	Set(context.Context, *SetRequest) (*SetResponse, error)
	// Subscribe allows a client to request the target to send it values
	// of particular paths within the data tree. These values may be streamed
	// at a particular cadence (STREAM), sent one off on a long-lived channel
	// (POLL), or sent as a one-off retrieval (ONCE).
	// Reference: gNMI Specification Section 3.5
	Subscribe(GNMI_SubscribeServer) error
}

func RegisterGNMIServer(s *grpc.Server, srv GNMIServer) {
	s.RegisterService(&_GNMI_serviceDesc, srv)
}

func _GNMI_Capabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNMIServer).Capabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnmi.gNMI/Capabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNMIServer).Capabilities(ctx, req.(*CapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNMI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNMIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnmi.gNMI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNMIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNMI_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNMIServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnmi.gNMI/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNMIServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNMI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GNMIServer).Subscribe(&gNMISubscribeServer{stream})
}

type GNMI_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type gNMISubscribeServer struct {
	grpc.ServerStream
}

func (x *gNMISubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gNMISubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GNMI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnmi.gNMI",
	HandlerType: (*GNMIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Capabilities",
			Handler:    _GNMI_Capabilities_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GNMI_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _GNMI_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _GNMI_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/reference/rpc/gnmi/gnmi.proto",
}

func init() {
	proto.RegisterFile("github.com/openconfig/reference/rpc/gnmi/gnmi.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0x5f, 0x6f, 0xe3, 0x58,
	0x15, 0x8f, 0x1d, 0xe7, 0x8f, 0x4f, 0xd2, 0xd6, 0xbd, 0x33, 0xec, 0x66, 0xbb, 0x03, 0x9b, 0x35,
	0x3b, 0x43, 0xd4, 0xdd, 0x4d, 0x46, 0x1d, 0x54, 0xa1, 0x41, 0xcb, 0xae, 0xdb, 0x7a, 0xda, 0xa0,
	0x34, 0x29, 0x37, 0xd9, 0x4a, 0x3c, 0xa0, 0xe8, 0x26, 0xb9, 0x49, 0x0d, 0x8e, 0xed, 0xf1, 0x75,
	0x0a, 0xe1, 0x1d, 0x09, 0x3e, 0x00, 0x12, 0xbc, 0x22, 0x3e, 0x00, 0x0f, 0x7c, 0x0a, 0x3e, 0x05,
	0x88, 0x27, 0xbe, 0x05, 0xba, 0x7f, 0xec, 0x24, 0x93, 0x4e, 0xdb, 0x7d, 0x68, 0x65, 0x9f, 0xdf,
	0x39, 0xc7, 0xf7, 0xfc, 0xf9, 0x9d, 0x7b, 0x02, 0xaf, 0x66, 0x5e, 0x72, 0xb3, 0x18, 0x35, 0xc7,
	0xe1, 0xbc, 0x15, 0x46, 0x34, 0x18, 0x87, 0xc1, 0xd4, 0x9b, 0xb5, 0x62, 0x3a, 0xa5, 0x31, 0x0d,
	0xc6, 0xb4, 0x15, 0x47, 0xe3, 0xd6, 0x2c, 0x98, 0x7b, 0xe2, 0x5f, 0x33, 0x8a, 0xc3, 0x24, 0x44,
	0x06, 0x7f, 0x3e, 0x68, 0xad, 0x99, 0xce, 0x42, 0x9f, 0x04, 0xb3, 0x96, 0x80, 0x47, 0x8b, 0x69,
	0x2b, 0x4a, 0x96, 0x11, 0x65, 0x2d, 0x12, 0x2c, 0xf9, 0x9f, 0x34, 0x3b, 0xf8, 0x7a, 0xc3, 0x20,
	0x9c, 0xf9, 0x74, 0x65, 0xc0, 0xe2, 0xf1, 0x96, 0x6c, 0x42, 0xd9, 0x38, 0xf6, 0xa2, 0x24, 0x8c,
	0xa5, 0x03, 0xfb, 0x1f, 0x1a, 0x54, 0xbb, 0x61, 0xe2, 0x4d, 0xbd, 0x31, 0x49, 0xbc, 0x30, 0x40,
	0xcf, 0xc0, 0x4c, 0xbc, 0x39, 0x65, 0x09, 0x99, 0x47, 0x35, 0xad, 0xae, 0x35, 0xf2, 0x78, 0x25,
	0x40, 0x36, 0x14, 0xa3, 0x98, 0x4e, 0xbd, 0xdf, 0xd5, 0xf4, 0xba, 0xd6, 0xa8, 0x1c, 0x41, 0x53,
	0xc4, 0x70, 0x45, 0x92, 0x1b, 0xac, 0x10, 0xf4, 0x14, 0x0a, 0xc4, 0xf7, 0x08, 0xab, 0xe5, 0xeb,
	0x5a, 0xc3, 0xc4, 0xf2, 0x05, 0x7d, 0x06, 0xc5, 0x45, 0x34, 0x21, 0x09, 0xad, 0x19, 0xf5, 0x7c,
	0xa3, 0x72, 0x54, 0x95, 0x96, 0xdf, 0x0a, 0x19, 0x56, 0x18, 0xf7, 0x3f, 0xa1, 0x3e, 0x4d, 0x68,
	0xad, 0x20, 0xb4, 0x36, 0xfc, 0x4b, 0xc4, 0xfe, 0x93, 0x01, 0x45, 0x69, 0x86, 0x7e, 0x00, 0x46,
	0x44, 0x92, 0x1b, 0x71, 0xce, 0x4d, 0x65, 0x21, 0x47, 0xcf, 0xa1, 0x70, 0x4b, 0xfc, 0x05, 0x55,
	0xa7, 0xad, 0x48, 0x85, 0x6b, 0x2e, 0x3a, 0xd1, 0x6b, 0x1a, 0x96, 0x28, 0xfa, 0x04, 0x80, 0x25,
	0xb1, 0x17, 0xcc, 0x86, 0xb7, 0xc4, 0xaf, 0x01, 0x3f, 0xf6, 0x45, 0x0e, 0x9b, 0x52, 0x76, 0x4d,
	0x7c, 0xf4, 0x11, 0x94, 0xbc, 0x20, 0x11, 0x68, 0x85, 0xa7, 0xe4, 0x22, 0x87, 0x8b, 0x5e, 0x90,
	0x70, 0xe8, 0x63, 0x28, 0x2f, 0x52, 0xac, 0x5a, 0xd7, 0x1a, 0xc6, 0x45, 0x0e, 0x97, 0x16, 0x2b,
	0x70, 0x14, 0x86, 0xbe, 0x00, 0x77, 0xea, 0x5a, 0xa3, 0xcc, 0x41, 0x2e, 0xe1, 0xe0, 0xf7, 0xc1,
	0x1c, 0x2d, 0x13, 0xca, 0x04, 0xba, 0x5b, 0xd7, 0x1a, 0xd5, 0x8b, 0x1c, 0x2e, 0x0b, 0x91, 0x82,
	0xa7, 0x7e, 0x48, 0xa4, 0xe7, 0xbd, 0xba, 0xd6, 0xd0, 0x39, 0x2c, 0x44, 0x1c, 0x3e, 0x82, 0xca,
	0x84, 0x8e, 0xbd, 0x39, 0x91, 0xde, 0x2d, 0x11, 0xe0, 0x9e, 0x0c, 0xf0, 0x4c, 0x02, 0xc7, 0x3f,
	0xbe, 0xc8, 0x61, 0x50, 0x5a, 0xdc, 0xe6, 0x18, 0xaa, 0x3e, 0x25, 0x53, 0xdf, 0x63, 0xd2, 0xeb,
	0xbe, 0x30, 0xda, 0x97, 0x46, 0xfd, 0x31, 0xf1, 0x49, 0xec, 0xc4, 0x31, 0x59, 0x5e, 0xe4, 0x70,
	0x25, 0x55, 0xe4, 0x76, 0x2d, 0x28, 0x91, 0x60, 0x29, 0x4c, 0x90, 0x30, 0x79, 0xda, 0x94, 0x8d,
	0xd5, 0x4c, 0x1b, 0xab, 0xe9, 0x04, 0xdc, 0xaa, 0x48, 0x82, 0xa5, 0x8a, 0xfb, 0xd7, 0x2c, 0x0c,
	0x84, 0xc5, 0x13, 0x15, 0x59, 0x89, 0x4b, 0x38, 0xf8, 0x19, 0xec, 0x08, 0xd0, 0xa3, 0xc9, 0x54,
	0x68, 0x3c, 0x55, 0x1a, 0x15, 0x2e, 0x6e, 0xd3, 0x64, 0xaa, 0xc2, 0x27, 0x6c, 0xec, 0x79, 0x42,
	0xe3, 0x7b, 0xaa, 0x24, 0x65, 0x21, 0xba, 0x26, 0xfe, 0x49, 0x01, 0xf2, 0xb7, 0xc4, 0xb7, 0x7f,
	0x02, 0x06, 0x2f, 0x37, 0xaa, 0x41, 0x89, 0xfa, 0x74, 0x4e, 0x83, 0xa4, 0xa6, 0xd5, 0xf3, 0x0d,
	0x13, 0xa7, 0xaf, 0xe8, 0x03, 0x28, 0x86, 0xb1, 0x37, 0xf3, 0x02, 0xd1, 0x03, 0x26, 0x56, 0x6f,
	0xb6, 0x0b, 0x05, 0xd1, 0x07, 0xbc, 0x5d, 0x65, 0x8f, 0xf0, 0x26, 0xaa, 0xa6, 0x2d, 0x61, 0x83,
	0xc1, 0xf9, 0x26, 0x8c, 0x76, 0x8f, 0x76, 0x65, 0x8a, 0xdc, 0x60, 0x1c, 0x4e, 0xbc, 0x60, 0x86,
	0x05, 0xf6, 0x5a, 0xaf, 0x69, 0xf6, 0x10, 0x0a, 0x6e, 0x1c, 0x87, 0x31, 0x42, 0x60, 0x8c, 0xc3,
	0x89, 0xf4, 0xb2, 0x83, 0xc5, 0x33, 0x3f, 0xd5, 0x9c, 0x32, 0x46, 0x66, 0x54, 0x7d, 0x3c, 0x7d,
	0x45, 0x0d, 0x30, 0x26, 0x24, 0x21, 0x82, 0x22, 0xef, 0x49, 0x27, 0x16, 0x1a, 0xb6, 0x03, 0x66,
	0x56, 0x4e, 0x1e, 0xcc, 0xc4, 0x9b, 0x79, 0x09, 0x13, 0x9f, 0x31, 0xb0, 0x7a, 0xe3, 0xa4, 0x8d,
	0x62, 0x3a, 0xf6, 0x98, 0x17, 0xca, 0x38, 0x77, 0xf0, 0x4a, 0x60, 0x3b, 0x50, 0x59, 0x2b, 0x2e,
	0x3a, 0xda, 0xcc, 0x55, 0xe5, 0xa8, 0xb6, 0xd5, 0x00, 0xae, 0xc4, 0xb3, 0x2c, 0xda, 0x7f, 0xd0,
	0x01, 0x6d, 0xe3, 0xef, 0x10, 0x47, 0xbb, 0x97, 0x38, 0xfa, 0x3d, 0xc4, 0xc9, 0xdf, 0x47, 0x1c,
	0xe3, 0x5e, 0xe2, 0x14, 0xee, 0x27, 0x4e, 0xf1, 0x21, 0xe2, 0x94, 0x1e, 0x41, 0x9c, 0x93, 0x92,
	0xea, 0x11, 0xfb, 0xef, 0x1a, 0x58, 0xfd, 0xc5, 0x88, 0x0f, 0xd1, 0x11, 0xc5, 0xf4, 0xed, 0x82,
	0xb2, 0x04, 0x1d, 0x83, 0xc9, 0x52, 0x99, 0x1a, 0x45, 0x1f, 0xa8, 0x94, 0x4a, 0x71, 0xc4, 0x27,
	0x6b, 0xc7, 0x63, 0x89, 0x48, 0x4e, 0xaa, 0x8a, 0xea, 0x60, 0x44, 0xa1, 0xef, 0xab, 0x26, 0x48,
	0xa7, 0x57, 0xe8, 0xfb, 0x17, 0x39, 0x2c, 0x10, 0xf4, 0x39, 0x94, 0xc4, 0xf4, 0xa4, 0x4c, 0x64,
	0x21, 0x3b, 0xa7, 0xc3, 0x85, 0xca, 0x61, 0xaa, 0x71, 0x62, 0x42, 0x29, 0x96, 0x27, 0xb2, 0x8b,
	0x60, 0x70, 0x3f, 0xf6, 0x5f, 0x35, 0xd8, 0x5f, 0x3b, 0x2e, 0x8b, 0xc2, 0x80, 0x51, 0xf4, 0x45,
	0x36, 0x8a, 0xe5, 0x61, 0x91, 0x74, 0xba, 0x7e, 0x0d, 0xf0, 0x3a, 0xa9, 0x91, 0xfc, 0x1c, 0x76,
	0xd8, 0x32, 0x18, 0x0f, 0x63, 0x65, 0x2e, 0x8e, 0xcb, 0xeb, 0x51, 0xe5, 0xe2, 0xcc, 0xe9, 0x0f,
	0xa1, 0x40, 0x39, 0x11, 0xd4, 0x41, 0xd5, 0xa8, 0x15, 0xdc, 0xb8, 0xc8, 0x61, 0x89, 0x9d, 0x00,
	0x94, 0x53, 0x37, 0xf6, 0x9f, 0xf3, 0x59, 0x2a, 0xb3, 0xfc, 0xac, 0xdd, 0x2f, 0xda, 0x7b, 0xef,
	0x97, 0x63, 0xa8, 0xb2, 0x35, 0xbb, 0x9a, 0x2e, 0x9a, 0x18, 0x6d, 0x67, 0x1c, 0x6f, 0xe8, 0xa1,
	0x4f, 0xa0, 0xb2, 0x60, 0x74, 0x98, 0x26, 0x54, 0x84, 0x81, 0x61, 0xc1, 0xa8, 0x23, 0x25, 0xc8,
	0x86, 0xfc, 0xdb, 0x30, 0xcd, 0xb4, 0x25, 0xfd, 0xfd, 0xa2, 0xd7, 0xbf, 0x24, 0xf1, 0x6f, 0x38,
	0xe9, 0x39, 0x88, 0x5a, 0x60, 0xcc, 0x39, 0xcd, 0x0b, 0x62, 0x2e, 0x7c, 0x7c, 0x77, 0x99, 0x9b,
	0x97, 0xe1, 0x84, 0x62, 0xa1, 0x88, 0x3e, 0x87, 0x7d, 0xe2, 0xfb, 0xe1, 0x6f, 0x87, 0x64, 0x36,
	0x8b, 0xe9, 0x4c, 0x64, 0x57, 0x74, 0x65, 0x19, 0x5b, 0x02, 0x70, 0x56, 0x72, 0xd4, 0x04, 0x7e,
	0x9e, 0x21, 0x37, 0xf4, 0x59, 0xad, 0x24, 0x02, 0x53, 0x25, 0xe7, 0x2e, 0xfd, 0x33, 0x92, 0x10,
	0x6c, 0x2e, 0x18, 0x15, 0x6f, 0x0c, 0x1d, 0x42, 0x99, 0xaa, 0x99, 0x54, 0x2b, 0xdf, 0x39, 0xa9,
	0x32, 0xdc, 0x7e, 0x01, 0x06, 0xb7, 0x42, 0x00, 0xc5, 0xfe, 0x00, 0xbb, 0xce, 0xa5, 0x95, 0x43,
	0x65, 0x30, 0x7a, 0xdd, 0x53, 0xd7, 0xd2, 0xf8, 0xd3, 0x55, 0xaf, 0xd3, 0xb1, 0x74, 0xfb, 0x3f,
	0x1a, 0x54, 0xd7, 0x03, 0x7a, 0xf0, 0x92, 0x3d, 0x54, 0x29, 0x91, 0xa3, 0xf2, 0x8e, 0xce, 0x5f,
	0xcb, 0xc6, 0x8f, 0x60, 0x8f, 0x91, 0x79, 0xe4, 0xd3, 0xa1, 0x17, 0x24, 0x34, 0xce, 0xb8, 0x8f,
	0x77, 0xa5, 0xb8, 0xad, 0xa4, 0xe8, 0x4b, 0x40, 0x6c, 0x11, 0x45, 0x31, 0x65, 0x6c, 0x18, 0xd3,
	0xc9, 0x22, 0x98, 0x90, 0x20, 0x91, 0xa3, 0x00, 0xef, 0xa7, 0x08, 0x4e, 0x01, 0xae, 0x7e, 0x43,
	0x49, 0x9c, 0x8c, 0x28, 0x49, 0x56, 0xae, 0x0b, 0xc2, 0xf5, 0x7e, 0x86, 0xa4, 0xde, 0xed, 0x17,
	0x00, 0xab, 0xc2, 0x8a, 0x31, 0x2d, 0x1f, 0xd5, 0xf4, 0x4e, 0x5f, 0xed, 0xaf, 0xa0, 0x20, 0x9a,
	0xe3, 0xc1, 0x1c, 0x64, 0x3b, 0x8f, 0xbe, 0xb6, 0xf3, 0xd8, 0x4d, 0x30, 0x33, 0xa6, 0xa2, 0x4f,
	0x53, 0x15, 0x39, 0x74, 0x2b, 0x6b, 0x4c, 0x4e, 0xf5, 0xff, 0xa6, 0x01, 0xf4, 0x69, 0x92, 0xce,
	0x95, 0xc7, 0x90, 0x61, 0xb5, 0x30, 0xe9, 0xef, 0x5b, 0x98, 0xd0, 0x0b, 0x3e, 0x18, 0x22, 0x9f,
	0x8c, 0x39, 0x77, 0xb7, 0x77, 0xaf, 0x14, 0x7c, 0xdc, 0x8a, 0x66, 0xff, 0x51, 0x83, 0x8a, 0x38,
	0xa4, 0x22, 0xfe, 0x63, 0x4e, 0xd9, 0x5c, 0xf1, 0x7e, 0x93, 0xae, 0xca, 0x37, 0x65, 0x0b, 0x3f,
	0xc1, 0x99, 0x0e, 0x7a, 0xbe, 0xba, 0x38, 0xf3, 0x5b, 0xe3, 0x24, 0xbb, 0x45, 0xed, 0x7f, 0x6b,
	0x50, 0x5d, 0xf7, 0xf0, 0xc0, 0xf2, 0x9a, 0x16, 0x51, 0x7f, 0xef, 0xb6, 0xf8, 0x98, 0xaf, 0xa2,
	0x2f, 0x40, 0x0f, 0x23, 0xd1, 0x8a, 0xbb, 0x47, 0xcf, 0xb6, 0xc3, 0x68, 0xf6, 0x22, 0x1a, 0x0b,
	0x3a, 0x63, 0x3d, 0x8c, 0xec, 0xaf, 0xc0, 0xcc, 0x04, 0xa8, 0x02, 0xa5, 0x76, 0xf7, 0xda, 0xe9,
	0xb4, 0xcf, 0xac, 0x1c, 0x27, 0xe2, 0x99, 0xdb, 0x71, 0x07, 0x9c, 0x7e, 0x15, 0x28, 0x61, 0xf7,
	0xaa, 0xe3, 0x9c, 0xba, 0x96, 0xce, 0x81, 0x6f, 0xaf, 0xce, 0x9c, 0x81, 0x6b, 0xe5, 0xed, 0xbf,
	0xe8, 0x00, 0xe7, 0xdf, 0xad, 0x25, 0x56, 0x61, 0xe6, 0xef, 0x0c, 0xf3, 0x4b, 0xb5, 0xda, 0xe4,
	0x45, 0x04, 0x1f, 0x49, 0x7c, 0xf5, 0x8d, 0x26, 0x1f, 0x32, 0x83, 0x65, 0x44, 0xe5, 0x96, 0xb3,
	0x31, 0x63, 0x0a, 0xf7, 0xcf, 0x98, 0x77, 0xe6, 0x57, 0xf1, 0xa1, 0xf9, 0x65, 0xff, 0x14, 0xca,
	0xe9, 0xd7, 0x50, 0x09, 0xf2, 0x4e, 0xa7, 0x23, 0xf3, 0x72, 0xda, 0xeb, 0xbe, 0x69, 0x9f, 0x5b,
	0x1a, 0x32, 0xa1, 0xd0, 0x1f, 0xf0, 0x4c, 0xe8, 0x68, 0x0f, 0x2a, 0xbd, 0x2b, 0x17, 0x3b, 0x83,
	0x76, 0xaf, 0xeb, 0x74, 0xac, 0xbc, 0x7d, 0x03, 0x95, 0xf3, 0xb5, 0x3e, 0x3c, 0x86, 0x6a, 0xb0,
	0x76, 0x83, 0x29, 0x9a, 0xdd, 0x71, 0xb7, 0xe1, 0x0d, 0x3d, 0xce, 0x4b, 0x79, 0x71, 0xe9, 0xdb,
	0x35, 0x97, 0x88, 0xfd, 0x04, 0xf6, 0x4f, 0x49, 0x44, 0x46, 0x9e, 0xef, 0x25, 0x4b, 0x95, 0x26,
	0xfb, 0x9f, 0x1a, 0xa0, 0x75, 0xa9, 0x3a, 0xc6, 0x6b, 0xb0, 0xf8, 0x78, 0x0a, 0xe3, 0x84, 0x4e,
	0xd2, 0x44, 0x68, 0x77, 0x27, 0x62, 0x2f, 0x53, 0x54, 0xe3, 0xfc, 0x6b, 0x78, 0xb2, 0xb2, 0x4d,
	0x93, 0xca, 0x44, 0x21, 0xb7, 0xb3, 0x8e, 0x32, 0xd5, 0x54, 0xc4, 0xd0, 0xa7, 0x50, 0x9d, 0x75,
	0x2f, 0xdb, 0xc3, 0x5b, 0x1a, 0x8b, 0x55, 0x50, 0xfe, 0x02, 0xab, 0x70, 0xd9, 0xb5, 0x14, 0xd9,
	0xbf, 0x02, 0x33, 0x3b, 0x01, 0x5f, 0x5a, 0x03, 0x32, 0x97, 0x7b, 0x80, 0x89, 0xc5, 0x33, 0xb2,
	0xa1, 0x1a, 0xc6, 0x33, 0x12, 0x78, 0xbf, 0x27, 0x49, 0xba, 0x4e, 0x9a, 0x78, 0x43, 0xc6, 0x27,
	0xe6, 0xe6, 0x27, 0xd2, 0xd7, 0xc3, 0x33, 0x28, 0xa7, 0xc7, 0xe1, 0x77, 0xca, 0xcf, 0xfb, 0xbd,
	0xae, 0x95, 0xe3, 0x65, 0x3c, 0xf9, 0xe5, 0xc0, 0xed, 0xcb, 0x8a, 0x5e, 0xe1, 0xde, 0xa0, 0x67,
	0xe9, 0xfc, 0xd1, 0xe9, 0x9f, 0xb6, 0xdb, 0x56, 0x1e, 0xed, 0x80, 0xc9, 0x55, 0x87, 0x6d, 0x77,
	0xf0, 0xc6, 0x32, 0x0e, 0x9d, 0xcd, 0xd5, 0x40, 0xdc, 0x5b, 0x08, 0x76, 0x07, 0x0e, 0x3e, 0x77,
	0x07, 0xc3, 0x33, 0xf7, 0x4d, 0xbb, 0xeb, 0x72, 0x0a, 0xed, 0x80, 0xd9, 0xeb, 0x0e, 0x4f, 0x2f,
	0x9c, 0xee, 0x39, 0x67, 0x11, 0xbf, 0xda, 0x9c, 0xcb, 0xab, 0x8e, 0x6b, 0xe9, 0x47, 0xff, 0xd5,
	0xc0, 0xe0, 0x71, 0x23, 0x07, 0xaa, 0x59, 0x99, 0x3c, 0xca, 0xd0, 0x87, 0x32, 0x8f, 0x5b, 0x05,
	0x3d, 0xa8, 0x6d, 0x03, 0xaa, 0xa6, 0x87, 0x90, 0x3f, 0xa7, 0x09, 0xb2, 0xde, 0xa5, 0xca, 0xc1,
	0xfe, 0x9a, 0x64, 0xa5, 0xdb, 0x5f, 0xe9, 0xf6, 0xb7, 0x74, 0xd7, 0x47, 0xe7, 0x37, 0x60, 0x66,
	0xdb, 0x19, 0xda, 0xbc, 0x38, 0xb3, 0xed, 0xf2, 0xe0, 0xc3, 0x2d, 0xb9, 0xb4, 0x6e, 0x68, 0x2f,
	0xb5, 0xd7, 0xdf, 0x40, 0x95, 0xa3, 0x43, 0x46, 0xe3, 0x5b, 0x6f, 0x4c, 0xd1, 0xb3, 0xad, 0x5f,
	0x12, 0x6f, 0x3c, 0x9f, 0xf6, 0x44, 0x16, 0x59, 0xed, 0x7f, 0x25, 0xd5, 0x0f, 0xc1, 0xdc, 0xeb,
	0x4b, 0x8b, 0x93, 0xf2, 0xbf, 0x7e, 0x56, 0x78, 0xd9, 0x7c, 0xd5, 0x7c, 0x39, 0x2a, 0x0a, 0x9b,
	0x57, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x12, 0x41, 0xc8, 0xc3, 0xc0, 0x10, 0x00, 0x00,
}
